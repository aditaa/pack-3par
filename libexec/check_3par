#!/bin/bash

# 3PAR Nagios check script v0.2
# Last update 2010/05/14 fredl@3par.com
# Last update 2011/03/03 ddu@antemeta.fr
# Last update 2015/01/26 by "emil" via https://exchange.nagios.org/directory/Plugins/Hardware/Storage-Systems/SAN-and-NAS/3PAR-check-script/details#rev-3256
# Last update 2015/07/29 pashol
# Last update 2015/09/17 qaxi@seznam.cz
#
# This script is provided "as is" without warranty of any kind and 3PAR specifically disclaims all implied warranties of merchantability, 
# non-infringement and fitness for a particular purpose. In no event shall 3PAR have any liability arising out of or related to 
# customer's 'use of the script including lost data, lost profits, or any direct or indirect, incidental, special, or 
# consequential damages arising there from.
# In addition, 3PAR reserves the right not to perform fixes or updates to this script
#
#
# Usage : check_3par InServ Username Command
#
# Supported commands 
#	check_pd : 	Check status of physical disks
#			Degraded -> 		Warning
#			Failed -> 		Critical
#
#	check_node : 	Check status of controller nodes
#                       Degraded ->     	Warning
#                       Failed ->      	 	Critical
#
#	check_ld :	Check status of logical disks
#                       Degraded ->     	Warning
#                       Failed ->       	Critical
#
#	check_vv : 	Check status of virtual volumes
#                       Degraded ->     	Warning
#                       Failed ->       	Critical
#
#       check_port_fc : Check status of virtual volumes
#                       loss_sync ->		Warning
#			config_wait ->		Warning
#			login_wait ->		Warning
#			non_participate ->	Warning
#			error ->		Critical
#
#       check_cap_ssd : Check used SSD capacity
#                       >= $PCWARNINGSSD ->     Warning
#                       >= $PCCRITICALSSD ->    Critical
#
#	check_cap_fc : 	Check used FC capacity
#                       >= $PCWARNINGFC ->     	Warning
#                       >= $PCCRITICALFC ->     Critical
#
#	check_cap_nl : Check used NL capacity 
#                       >= $PCWARNINGNL ->      Warning
#                       >= $PCCRITICALNL ->     Critical
#
#	check_ps_node : Check Power Supply Node
#                       Degraded ->     	Warning
#                       Failed ->       	Critical
#
#	check_ps_cage : Check Power Supply Cage
#                       Degraded ->     	Warning
#                       Failed ->       	Critical
#

if [ "$#" -ne 3 ] || [ "$1" == "" ] || [ "$2" == "" ] || [ "$3" == "" ]
then
	echo Invalid usage : check_3par_perf InServ Username Command
	exit 3
fi

INSERV=$1
USERNAME=$2
COMMAND=$3
TMPOUT=""
PCCRITICALFC=90
PCWARNINGFC=80
PCCRITICALNL=90
PCWARNINGNL=80
PCCRITICALSSD=90
PCWARNINGSSD=80

# To connect using the 3PAR CLI, uncomment the following line
#CONNECTCOMMAND="/opt/3PAR/inform_cli_2.3.1/bin/cli -sys $INSERV -pwf $USERNAME"
# Note : connecting using the CLI requires creating password files (.pwf)

# To connect using SSH. uncomment the following line
CONNECTCOMMAND="ssh $USERNAME@$INSERV"
# Note : connecting using SSH requires setting public key authentication

if [ "$COMMAND" == "check_pd" ]
then
	TMPOUT=$( $CONNECTCOMMAND showpd -showcols Id,State -nohdtot 2>&1 )
	if [ $? -gt 0 ]
	then
		echo Could not connect to InServ "$INSERV"
		exit 3
	fi

	if [ $( echo "$TMPOUT" | grep -c failed ) -gt 0 ]
	then
		echo CRITICAL! The following PDs have abnormal status : $( echo "$TMPOUT" | grep -v normal | tr -d '\n' )
		exit 2
	else
		if [ $( echo "$TMPOUT" | grep -c failed ) -gt 0 ]
		then	
                        echo WARNING! The following PDs have abnormal status : $( echo "$TMPOUT" | grep -v normal | tr -d '\n' )
			exit 1
		else
			echo OK : All PDs have normal status
			exit 0
		fi
	fi
fi


if [ "$COMMAND" == "check_node" ]
then
	TMPOUT=$( $CONNECTCOMMAND shownode -s -nohdtot 2>&1 )
        if [ $? -gt 0 ]
        then
                echo Could not connect to InServ $INSERV
                exit 3
        fi

        if [ $( echo "$TMPOUT" | grep -c -i failed ) -gt 0 ]
        then
                echo CRITICAL! The following ps have abnormal status : $( echo "$TMPOUT" | grep -i failed | tr -s " " | tr -d '\n' )
		exit 2
        else
                if [ $( echo "$TMPOUT" | grep -c -i degraded ) -gt 0 ]
                then
                        echo WARNING! The following ps have abnormal status : $( echo "$TMPOUT" | grep -i degraded | tr -s " " | tr -d '\n' )
			exit 1
                else
                        echo OK : All ps have normal status
			exit 0
                fi
        fi
fi

if [ "$COMMAND" == "check_ps_node" ]
then
	TMPOUT=$( $CONNECTCOMMAND shownode -ps -nohdtot 2>&1 )
        if [ $? -gt 0 ]
        then
                echo Could not connect to InServ $INSERV
                exit 3
        fi

        if [ $( echo "$TMPOUT" | grep -c -i failed ) -gt 0 ]
        then
                echo CRITICAL! The following ps have abnormal status : $( echo "$TMPOUT" | grep -i failed | tr -s " " | tr -d '\n' )
		exit 2
        else
                if [ $( echo "$TMPOUT" | grep -c -i degraded ) -gt 0 ]
                then
                        echo WARNING! The following ps have abnormal status : $( echo "$TMPOUT" | grep -i degraded | tr -s " " | tr -d '\n' )
			exit 1
                else
                        echo OK : All ps have normal status
			exit 0
                fi
        fi
fi

if [ "$COMMAND" == "check_ps_cage" ]
then
	TMPOUT=$( $CONNECTCOMMAND showcage -d 2>&1 )
	if [ $? -gt 0 ]
        then
                echo Could not connect to InServ $INSERV
                exit 3
        fi

        if [ $( echo "$TMPOUT" | awk '{ if ($0 ~ "------Cage") cage=$5; if ($0 ~ "Failed") print cage" "$0}' | wc -l ) -gt 0 ]
        then
                echo CRITICAL! The following cages have abnormal status : $( echo "$TMPOUT" | awk '{ if ($0 ~ "------Cage") cage=$5; if ($0 ~ "Failed") print cage" "$0}' | tr -s " " | tr -d '\n' )
		exit 2
        else
                if [ $( echo "$TMPOUT" | awk '{ if ($0 ~ "------Cage") cage=$5; if ($0 ~ "Degraded") print cage" "$0}' | wc -l ) -gt 0 ]
                then
                        echo WARNING! The following cages have abnormal status : $( echo "$TMPOUT" | awk '{ if ($0 ~ "------Cage") cage=$5; if ($0 ~ "Degraded") print cage" "$0}' | tr -s " " | tr -d '\n' )
			exit 1
                else
                        echo OK : All nodes have normal status
			exit 0
                fi
        fi
fi

if [ "$COMMAND" == "check_vv" ]
then
        TMPOUT=$( $CONNECTCOMMAND showvv -showcols Name,State -notree -nohdtot 2>&1 )
        if [ $? -gt 0 ]
        then
                echo Could not connect to InServ $INSERV
		exit 3
        fi

        if [ $( echo "$TMPOUT" | grep -c -i failed ) -gt 0 ]
        then
                echo CRITICAL! There are failed VVs. Contact 3PAR support
		exit 2
        else
                if [ $( echo "$TMPOUT" | grep -c -i degraded ) -gt 0 ]
                then
                        echo WARNING! There are degraded VVs. Contact 3PAR support
			exit 1
                else
                        echo OK : All VVs are normal
			exit 0
                fi
        fi
fi


if [ "$COMMAND" == "check_ld" ]
then
        TMPOUT=$( $CONNECTCOMMAND showld -state -nohdtot 2>&1 )
        if [ $? -gt 0 ]
        then
                echo Could not connect to InServ $INSERV
                exit 3
        fi

        if [ $( echo "$TMPOUT" | grep -c -i failed ) -gt 0 ]
        then
                echo CRITICAL! There are failed LDs. Contact 3PAR support
		exit 2
        else
                if [ $( echo "$TMPOUT" | grep -c -i degraded ) -gt 0 ]
                then
                        echo WARNING! There are degraded LDs. Contact 3PAR support
			exit 1
                else
                        echo OK : All LDs have normal status
			exit 0
                fi
        fi
fi

if [ "$COMMAND" == "check_port_fc" ]
then
        TMPOUT=$( $CONNECTCOMMAND showport -nohdtot 2>&1 )
        if [ $? -gt 0 ]
        then
                echo Could not connect to InServ $INSERV
                exit 3
        fi
	TMPOUT=$( echo "$TMPOUT" | grep -v -i iscsi 2>&1 | grep -v -i rcip 2>&1 )

        if [ $( echo "$TMPOUT" | grep -c -i error ) -gt 0 ]
        then
                echo CRITICAL! Some ports are in the error state
                exit 2
        else
                if [ $( echo "$TMPOUT" | grep -c -i loss_sync ) -gt 0 ] || [ $( echo "$TMPOUT" | grep -c -i config_wait ) -gt 0 ] || [ $( echo "$TMPOUT" | grep -c -i login_wait ) -gt 0 ] || [ $( echo "$TMPOUT" | grep -c -i non_participate ) -gt 0 ]
                then
                        echo WARNING! Some ports are in an abnormal state \(loss_sync, config_wait, login_wait or non_participate\)
                        exit 1
                else
                        echo OK : All FC ports have normal status \(ready or offline\)
                        exit 0
                fi
        fi
fi


if [ "$COMMAND" == "check_cap_ssd" ]
then
        TMPOUT=$( $CONNECTCOMMAND showpd -p -devtype SSD -showcols Size_MB,Free_MB -csvtable 2>&1 )
        if [ $? -gt 0 ]
        then
                echo Could not connect to InServ $INSERV
                exit 3
        fi

	LASTLINE=$( echo "$TMPOUT" | tail -1 )
	if [ "$LASTLINE" = "No PDs listed" ] || [ "$LASTLINE" = "0,0" ]
        then
                echo No SSD disks
                exit 0
        fi

        TOTCAPSSD=$( echo "$TMPOUT" | tail -1 | cut -d, -f1 )
        FREECAPSSD=$( echo "$TMPOUT" | tail -1 | cut -d, -f2 )
        USEDCAPPCSSD="$(( 100 - ( ( $FREECAPSSD * 100 ) / $TOTCAPSSD ) ))"
	USEDCAPSSD=$((($TOTCAPSSD-$FREECAPSSD)))
	WARNCAPSSDRAW=$(($TOTCAPSSD*$PCWARNINGSSD/100))
	CRITCAPSSDRAW=$(($TOTCAPSSD*$PCCRITICALSSD/100))
	#TOTCAPSSDGB=$(($TOTCAPSSD/1024))

        if [ "$USEDCAPPCSSD" -ge "$PCCRITICALSSD" ]
        then
                echo CRITICAL! Used SSD capacity = $USEDCAPPCSSD\% \( \> $PCCRITICALSSD\% \)\|UsedSpace=$USEDCAPPCSSD\%\;$PCWARNINGSSD\;$PCCRITICALSSD UsedSpace=$USEDCAPSSD\MB\;$WARNCAPSSDRAW\;$CRITCAPSSDRAW\;0\;$TOTCAPSSD
                exit 2
        else
                if [ "$USEDCAPPCSSD" -ge "$PCWARNINGSSD" ]
                then
                        echo WARNING! Used SSD capacity = $USEDCAPPCSSD\% \( \> $PCWARNINGSSD\% \)\|UsedSpace=$USEDCAPPCSSD\%\;$PCWARNINGSSD\;$PCCRITICALSSD UsedSpace=$USEDCAPSSD\MB\;$WARNCAPSSDRAW\;$CRITCAPSSDRAW\;0\;$TOTCAPSSD
                        exit 1
                else

                        echo OK : Used SSD capacity = $USEDCAPPCSSD\%\|UsedSpace=$USEDCAPPCSSD\%\;$PCWARNINGSSD\;$PCCRITICALSSD UsedSpace=$USEDCAPSSD\MB\;$WARNCAPSSDRAW\;$CRITCAPSSDRAW\;0\;$TOTCAPSSD
                        exit 0
                fi
        fi
fi


if [ "$COMMAND" == "check_cap_fc" ]
then
        TMPOUT=$( $CONNECTCOMMAND showpd -p -devtype FC -showcols Size_MB,Free_MB -csvtable 2>&1 )
        if [ $? -gt 0 ]
        then
                echo Could not connect to InServ $INSERV
                exit 3
        fi
	
	LASTLINE=$( echo "$TMPOUT" | tail -1 )
	if [ "$LASTLINE" = "No PDs listed" ] || [ "$LASTLINE" = "0,0" ]
	then
		echo No FC disks
		exit 0
	fi

	TOTCAPFC=$( echo "$TMPOUT" | tail -1 | cut -d, -f1 )
	FREECAPFC=$( echo "$TMPOUT" | tail -1 | cut -d, -f2 )
	USEDCAPPCFC="$(( 100 - ( ( $FREECAPFC * 100 ) / $TOTCAPFC ) ))"
	USEDCAPFC=$((($TOTCAPFC-$FREECAPFC)))
    	WARNCAPFCRAW=$(($TOTCAPFC*$PCWARNINGFC/100))
    	CRITCAPFCRAW=$(($TOTCAPFC*$PCCRITICALFC/100))
	#TOTCAPFCGB=$(($TOTCAPFC/1024))

	if [ "$USEDCAPPCFC" -ge "$PCCRITICALFC" ]
        then
                echo CRITICAL! Used FC capacity = $USEDCAPPCFC\% \( \> $PCCRITICALFC\% \)\|UsedSpace=$USEDCAPPCFC\%\;$PCWARNINGFC\;$PCCRITICALFC UsedSpace=$USEDCAPFC\MB\;$WARNCAPFCRAW\;$CRITCAPFCRAW\;0\;$TOTCAPFC
		exit 2
        else
        	if [ "$USEDCAPPCFC" -ge "$PCWARNINGFC" ]
        	then
                	echo WARNING! Used FC capacity = $USEDCAPPCFC\% \( \> $PCWARNINGFC\% \)\|UsedSpace=$USEDCAPPCFC\%\;$PCWARNINGFC\;$PCCRITICALFC UsedSpace=$USEDCAPFC\MB\;$WARNCAPFCRAW\;$CRITCAPFCRAW\;0\;$TOTCAPFC
			exit 1
	        else

                        echo OK : Used FC capacity = $USEDCAPPCFC\%\|UsedSpace=$USEDCAPPCFC\%\;$PCWARNINGFC\;$PCCRITICALFC UsedSpace=$USEDCAPFC\MB\;$WARNCAPFCRAW\;$CRITCAPFCRAW\;0\;$TOTCAPFC
			exit 0
                fi
        fi
fi

if [ "$COMMAND" == "check_cap_nl" ]
then
        TMPOUT=$( $CONNECTCOMMAND showpd -p -devtype NL -showcols Size_MB,Free_MB -csvtable 2>&1 )
        if [ $? -gt 0 ]
        then
                echo Could not connect to InServ $INSERV
                exit 3
        fi

	LASTLINE=$(echo "$TMPOUT" | tail -1 )
	if [ "$LASTLINE" = "No PDs listed" ] || [ "$LASTLINE" = "0,0" ]
        then
                echo No NL disks
		exit 0
        fi

        TOTCAPNL=$( echo "$TMPOUT" | tail -1 | cut -d, -f1 )
        FREECAPNL=$( echo "$TMPOUT" | tail -1 | cut -d, -f2 )
        USEDCAPPCNL="$(( 100 - ( ( $FREECAPNL * 100 ) / $TOTCAPNL ) ))"

        if [ "$USEDCAPPCNL" -ge "$PCCRITICALNL" ]
        then
                echo CRITICAL! Used NL capacity = $USEDCAPPCNL\% \( \> $PCCRITICALNL\% \)
		exit 2
        else
                if [ "$USEDCAPPCNL" -ge "$PCWARNINGNL" ]
                then
                        echo WARNING! Used NL capacity = $USEDCAPPCNL\% \( \> $PCWARNINGNL\% \)
			exit 1
                else
                        echo OK : Used NL capacity = $USEDCAPPCNL\%
			exit 0
                fi
        fi
fi

echo ERROR Wrong command \""$COMMAND"\" .
exit 128
